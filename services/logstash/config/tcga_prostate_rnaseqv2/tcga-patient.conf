input {
    file {
        type => "tcga-patient"
        # This is necessary to ensure that the file is
        # processed in full. Without it logstash will default
        # to only processing new entries to the file (as would
        # be seen with a logfile for a live application, but
        # not static data like we're working with here)
        start_position  => "beginning"
        # This is the full path to the file to process.
        # Wildcards are valid.
        path =>  "/data/PRAD_bio.patient.txt"
        # If I'm testing with a small test log that I want to repeatedly restart I just turn off the sincedb:
        # This config causes logstash to start at the beginning of the file every time.
        sincedb_path => "/dev/null"
    }
}


filter {
  if [type] == "tcga-patient" {
        # Process the input using the csv filter.
        # The list of column names I took manually from the
        # file itself
        csv {
                # note: this must be an actual tab character
                separator => "	"
                columns => ["patient_id",
                            "bcr_patient_uuid",
                            "gender",
                            "days_to_index",
                            "donor_id",
                            "bcr_patient_barcode",
                            "tissue_source_site",
                            "birth_days_to",
                            "pharmaceutical_therapy_adjuvant",
                            "death_days_to",
                            "tumor_status",
                            "form_completion_day",
                            "history_neoadjuvant_treatment",
                            "prospective_collection",
                            "ajcc_pathologic_tumor_stage",
                            "icd_o_3_site",
                            "ajcc_nodes_clinical_cn",
                            "icd_10",
                            "vital_status",
                            "radiation_treatment_adjuvant",
                            "gleason_pattern_tertiary",
                            "ethnicity",
                            "ajcc_tumor_pathologic_pt",
                            "mri_at_diagnosis",
                            "form_completion_year",
                            "serum_markers",
                            "ajcc_staging_edition",
                            "gleason_score",
                            "informed_consent_verified",
                            "biochemical_recurrence_indicator",
                            "race",
                            "treatment_outcome_first_course",
                            "histologic_diagnosis",
                            "laterality",
                            "initial_pathologic_dx_year",
                            "lymph_nodes_examined_he_count",
                            "ct_scan_ab_pelvis_indicator",
                            "lymph_nodes_examined_count",
                            "days_to_mri",
                            "b_symptoms_present_indicator",
                            "icd_o_3_histology",
                            "submitted_tumor_site",
                            "cause_of_death_source",
                            "initial_pathologic_dx_days_to",
                            "igcccg_stage",
                            "residual_tumor",
                            "form_completion_month",
                            "extranodal_lymphomatous_involvement",
                            "cause_of_death",
                            "history_other_malignancy",
                            "psa_most_recent_results",
                            "retrospective_collection",
                            "ajcc_tumor_clinical_ct",
                            "lymph_nodes_examined",
                            "age_at_initial_pathologic_diagnosis",
                            "ajcc_nodes_pathologic_pn",
                            "bone_scan_results",
                            "days_to_ct_scan_ab_pelvis",
                            "gleason_pattern_secondary",
                            "ajcc_metastasis_pathologic_pm",
                            "gleason_pattern_primary",
                            "ajcc_clinical_tumor_stage",
                            "ajcc_metastasis_clinical_cm",
                            "days_to_psa_most_recent",
                            "days_to_biochemical_recurrence_first",
                            "last_contact_days_to",
                            "histologic_diagnosis_other",
                            "days_to_bone_scan",
                            "masaoka_stage",
                            "zone_of_origin"
                            ]

                  add_field => {
                    "species" => "NCBITaxon:9606"
                    "projectCode" => "PRAD"
                    "individualId" => "%{patient_id}"
                  }

            }


        # tcga calls it gender, we would like to have a standard `sex` field per GA4GH
        if [gender] {
          mutate { add_field => { "sex" => "%{gender}" } }
        } else {
          mutate { add_field => { "sex" => "UNKNOWN" } }
        }

        if [vital_status] {
          mutate { add_field => { "vitalStatus" => "%{vital_status}" } }
        } else {
          mutate { add_field => { "vitalStatus" => "UNKNOWN" } }
        }

        mutate {
          uppercase => [ "sex" ]
          convert => {"gleason_score" => "integer" }
        }
  }
}

output {
  if [type] == "tcga-patient" {
        # Now send it to Elasticsearch which here is running
        # on the same machine.
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "individual-tcga"
          document_type => "individual"
          document_id => "%{individualId}"
          # see https://www.elastic.co/blog/new-in-logstash-1-3-elasticsearch-index-template-management
          template_overwrite => true
       	  template => "/data/default_index_template.json"
        }
        stdout { codec => rubydebug }
  }
}
