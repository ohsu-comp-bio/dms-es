input {
    file {
        type => "baml-individual"
        # This is necessary to ensure that the file is
        # processed in full. Without it logstash will default
        # to only processing new entries to the file (as would
        # be seen with a logfile for a live application, but
        # not static data like we're working with here)
        start_position  => "beginning"
        # This is the full path to the file to process.
        # Wildcards are valid.
        path =>  "/data/individual.tsv"
        # If I'm testing with a small test log that I want to repeatedly restart I just turn off the sincedb:
        # This config causes logstash to start at the beginning of the file every time.
        sincedb_path => "/dev/null"
    }
}

filter {
  if [type] == "baml-individual" {
    # Process the input using the csv filter.
    # The list of column names I took manually from the
    # file itself
    csv {
        # note: this must be an actual tab character
        separator => "	"
        columns => [
          "patientId",
          "comment",
          "dob",
          "ethnicity",
          "gender",
          "firstName",
          "lastName",
          "mrn",
          "race",
          "vitalStatus"
  		  ]

        add_field => {
          "project_code" => "BAML"
          "description" => "A patient"
          "individual_id" => "BAML-%{patientId}"
         }

		}
		if [patientId] == "patientId" {
			drop {}
		}

		#would be useful to have a piece of common code for these transforms
		if [gender] {
		  mutate { add_field => { "sex" => "%{gender}" } }
		} else {
		  mutate { add_field => { "sex" => "UNKNOWN" } }
		}

		if [!ethnicity] {
		  mutate { update => { "ethnicity" => "UNKNOWN" } }
		}

		if [!race] {
		  mutate { update => { "race" => "UNKNOWN" } }
		}

		if [!vitalStatus] {
		  mutate { update => { "vitalStatus" => "UNKNOWN" } }
		}

    mutate {
      uppercase => [ "ethnicity" ]
      uppercase => [ "sex" ]
      uppercase => [ "race" ]
      uppercase => [ "vitalStatus" ]
    }
  }
}

output {
  if [type] == "baml-individual" {
        # Now send it to Elasticsearch which here is running
        # on the same machine.
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "individual-baml"
          document_type => "individual"
          document_id => "BAML-%{patientId}"
          template_overwrite => true
          template => "/data/default_index_template.json"
        }
        stdout { codec => rubydebug }
  }
}
