input {
    file {
        type => "baml-sample"
        # This is necessary to ensure that the file is
        # processed in full. Without it logstash will default
        # to only processing new entries to the file (as would
        # be seen with a logfile for a live application, but
        # not static data like we're working with here)
        start_position  => "beginning"
        # This is the full path to the file to process.
        # Wildcards are valid.
        path =>  "/data/lls_scor-specimen.tsv"
        # If I'm testing with a small test log that I want to repeatedly restart I just turn off the sincedb:
        # This config causes logstash to start at the beginning of the file every time.
        sincedb_path => "/dev/null"
    }
}

filter {
  if [type] == "baml-sample" {
    # Process the input using the csv filter.
    # The list of column names I took manually from the
    # file itself
    csv {
        # note: this must be an actual tab character
        separator => "	"
        columns => ["individualId","specimen_id","sampleId","original_specimen_location","processing","specimen_type","sufficient","cell_concentration","cell_viability","dilution_for_cell_count","resuspension_volume","total_cells_viable","volume"]

        add_field => {
           "projectCode" => "BAML"
           "description" => "A %{specimen_type} specimen"
           "species" => "NCBITaxon:9606"
        }

		}
		if [sampleId] == "sampleId" {
			drop {}
		}


    mutate {
      convert => {"cell_concentration" => "float" }
      convert => {"cell_viability" => "float" }
      convert => {"dilution_for_cell_count" => "float" }
      convert => {"resuspension_volume" => "float" }
      convert => {"total_cells_viable" => "float" }
      convert => {"volume" => "float" }
      update => { "individualId" => "BAML-%{individualId}" }
      update => { "sampleId" => "BAML-%{sampleId}" }
    }

#    date {
#      match => [ "collectionDate", "MM/dd/yyyy" ]
#      target => "collectionDate"
#    }

  }
}

output {
  if [type] == "baml-sample" {
        # Now send it to Elasticsearch
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "sample-baml"
          document_type => "sample"
          document_id => "%{sampleId}"
          template_overwrite => true
          template => "/data/default_index_template.json"
        }
        stdout { codec => rubydebug }
  }
}
