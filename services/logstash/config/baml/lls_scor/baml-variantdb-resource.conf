
input {
    file {
        type => "baml-variantdb-resource"
        # This is necessary to ensure that the file is
        # processed in full. Without it logstash will default
        # to only processing new entries to the file (as would
        # be seen with a logfile for a live application, but
        # not static data like we're working with here)
        start_position  => "beginning"
        # This is the full path to the file to process.
        # Wildcards are valid.
        path =>  "/data/variantdb-resource.tsv"
        # If I'm testing with a small test log that I want to repeatedly restart I just turn off the sincedb:
        # This config causes logstash to start at the beginning of the file every time.
        sincedb_path => "/dev/null"
    }
}

filter {
  if [type] == "baml-variantdb-resource" {
    # Process the input using the csv filter.
    # The list of column names I took manually from the
    # file itself
    csv {
        # note: this must be an actual tab character
        separator => "	"
        columns => ["individualId","sampleId", "ccc_did",	"maf_ccc_did","maf_url"]


        # TODO: is filepath assumed to be the unique key?
        add_field => {
          "projectCode" => "BAML"
          "resource_type" => "api"
         }

      }
      if [individualId] == "individualId" {
        drop {}
      }
      # not necessary
      mutate {
        remove_field => [ "maf_url" ]
      }

      # if ccc_did not supplied, create one
      uuid {
        target    => "ccc_did"
        overwrite => false
      }


  } # end if
} # end filter

output {
  if [type] == "baml-variantdb-resource" {
        # Now send it to Elasticsearch which here is running
        # on the same machine.
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "resource-variantdb-baml"
          document_type => "resource"
          document_id => "%{ccc_did}"
          template_overwrite => true
          template => "/data/default_index_template.json"
        }
        stdout { codec => rubydebug }
  }
}
