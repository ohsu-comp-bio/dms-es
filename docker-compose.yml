# bring up the simplest possible configuration
# 1 ES node & 1 Kibana node
# all settings are default
# The data stored in Elasticsearch will be persisted after container reboot
# but not after container removal.
# see https://github.com/deviantony/docker-elk for more involved examples

# To load data via logstash
# create a directory with logstash conf files
# run the latest logstash docker container
# docker run  --add-host elasticsearch:$(docker-machine ip default)   -v $(pwd):/data -it  logstash  logstash  -f ./data/icgc-*.conf  -v --verbose

elasticsearch:
  container_name: elasticsearch
  build: services/elasticsearch
  # environment:
  #   - VIRTUAL_HOST=elasticsearch.ccc.org
  #   - VIRTUAL_PORT=9200
  command: >
    elasticsearch
      --network.host=0.0.0.0
      --cluster.name=ccc-es
      --node.name=central
  ports:
    - "9200:9200"

# note: the kibana docker entrypoint.sh 'convention over configuration'
# looks for a link to http://elasticsearch:9200 by default
# see https://github.com/docker-library/kibana/blob/master/4.2/docker-entrypoint.sh
kibana:
  container_name: kibana
  build: services/kibana
  # environment:
  #   - VIRTUAL_HOST=kibana.ccc.org
  #   - VIRTUAL_PORT=5601
  volumes:
    - ./services/kibana/config/kibana.yml:/opt/kibana/config/kibana.yml
  ports:
    - "5601:5601"
  links:
    - elasticsearch

cromwell:
  container_name: cromwell
  build: services/cromwell/
  # environment:
  #   - VIRTUAL_HOST=cromwell.ccc.org
  #   - VIRTUAL_PORT=8000
  environment:
    - LOG_LEVEL=debug
  ports:
    - "8000:8000"


# proxy everything to avoid cross site scripting
# note: setup your client /etc/hosts or dns to recognize "kibana.ccc.org"
# pointing at this docker container
nginx:
  container_name: nginx
  build: services/nginx/
  # environment:
  #   - DEFAULT_HOST=kibana.ccc.org
  volumes:
    - /var/run/docker.sock:/tmp/docker.sock
  ports:
    - "80:80"
  links:
    - elasticsearch
    - kibana
    - cromwell
