
input {
    file {
        type => "baml-resource"
        # This is necessary to ensure that the file is
        # processed in full. Without it logstash will default
        # to only processing new entries to the file (as would
        # be seen with a logfile for a live application, but
        # not static data like we're working with here)
        start_position  => "beginning"
        # This is the full path to the file to process.
        # Wildcards are valid.
        path =>  "/data/BeatAML_seqcap_2015_10_20_public_dashboard.tsv"
        # If I'm testing with a small test log that I want to repeatedly restart I just turn off the sincedb:
        # This config causes logstash to start at the beginning of the file every time.
        sincedb_path => "/dev/null"
    }
}

filter {
  if [type] == "baml-resource" {
    # Process the input using the csv filter.
    # The list of column names I took manually from the
    # file itself
    csv {
        # note: this must be an actual tab character
        separator => "	"
        columns => [
        "LabID",
        "PatientID"
        ]

        add_field => {
           "description" => "A %{resource_type}"
           "individual_id" => "BAML-%{PatientID}"
           "datasetId" => "BAML-%{PatientID}:uuid"
           "url" => "//TODO url"
#           "format" => "//TODO url"
#           "description",
#           "hash",
#           "name",
#           "resource_type",
#           "mimetype",
#           "mimetype_inner",
#           "size",
#           "created",
#           "last_modified",
#           "extras"
         }

      }
      if [LabID] == "LabID" {
        drop {}
      }

  }
}

output {
  if [type] == "baml-resource" {
        # Now send it to Elasticsearch which here is running
        # on the same machine.
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "resource-baml"
          document_type => "resource"
          document_id => "BAML-%{datasetId}"
          template_overwrite => true
          template => "/data/default_index_template.json"
        }
        stdout { codec => rubydebug }
  }
}
